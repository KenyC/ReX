---
source: src/parser/mod.rs
expression: "parse(r\"\\lim_{h \\to 0 } \\frac{f(x+h)-f(x)}{h}\")"
---
Ok(
    [
        Scripts(
            Scripts {
                base: Some(
                    AtomChange(
                        AtomChange {
                            at: Operator(
                                true,
                            ),
                            inner: [
                                PlainText(
                                    PlainText {
                                        text: "lim",
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                superscript: None,
                subscript: Some(
                    [
                        Symbol(
                            Symbol {
                                codepoint: '‚Ñé',
                                atom_type: Alpha,
                            },
                        ),
                        Symbol(
                            Symbol {
                                codepoint: '‚Üí',
                                atom_type: Relation,
                            },
                        ),
                        Symbol(
                            Symbol {
                                codepoint: '0',
                                atom_type: Alpha,
                            },
                        ),
                    ],
                ),
            },
        ),
        GenFraction(
            GenFraction {
                numerator: [
                    Symbol(
                        Symbol {
                            codepoint: 'ùëì',
                            atom_type: Alpha,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: '(',
                            atom_type: Open,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: 'ùë•',
                            atom_type: Alpha,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: '+',
                            atom_type: Binary,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: '‚Ñé',
                            atom_type: Alpha,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: ')',
                            atom_type: Close,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: '‚àí',
                            atom_type: Binary,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: 'ùëì',
                            atom_type: Alpha,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: '(',
                            atom_type: Open,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: 'ùë•',
                            atom_type: Alpha,
                        },
                    ),
                    Symbol(
                        Symbol {
                            codepoint: ')',
                            atom_type: Close,
                        },
                    ),
                ],
                denominator: [
                    Symbol(
                        Symbol {
                            codepoint: '‚Ñé',
                            atom_type: Alpha,
                        },
                    ),
                ],
                bar_thickness: Default,
                left_delimiter: None,
                right_delimiter: None,
                style: NoChange,
            },
        ),
    ],
)
