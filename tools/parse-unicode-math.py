#!/bin/python
l = []

header = """\
// DO NOT MODIFY.  This file is automatically generated.
use phf;

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub struct Symbol {
    code: u32,
    atom_type: AtomType,
}

#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum AtomType {
    Punct,
    Ord,
    Open,
    Close,
    Bin,
    Rel,
    Accent,
    AccentWide,
    BotAccent,
    BotAccentWide,
    Alpha,
    Fence,
    Op,
    Over,
    Under,
}

pub static UNICODEMATH: phf::Map<&'static str, Symbol> = phf_map! {
"""

convert_type = {
    "mathalpha": "Alpha",
    "mathpunct": "Punct",
    "mathopen": "Open",
    "mathclose": "Close",
    "mathord": "Ord",
    "mathbin": "Bin",
    "mathrel": "Rel",
    "mathop": "Op",
    "mathfence": "Fence",
    "mathover": "Over",
    "mathunder": "Under",
    "mathaccent": "Accent",
    "mathaccentwide": "AccentWide",
    "mathbotaccent": "BotAccent",
    "mathbotaccentwide": "BotAccentWide",
}

template = '    "{}" => Symbol {{ code: {}, atom_type: AtomType::{} }}, // {}\n'

with open('unicode-math-table.tex', 'r') as f:
    for line in f:
        point = "0x" + line[20:25]
        cmd  = line[28:53].strip()

        cursor = 56
        while line[cursor] != '}':
            cursor += 1

        atom = line[56:cursor]

        cursor += 2
        end = cursor
        while line[end] != '}':
            end += 1

        desc = line[cursor:end]
        l.append((cmd, point, convert_type[atom], desc))

with open('out.rs', 'w') as f:
    f.write(header)
    for tpl in l:
        f.write(template.format(tpl[0], tpl[1], tpl[2], tpl[3]))
    f.write('};')
